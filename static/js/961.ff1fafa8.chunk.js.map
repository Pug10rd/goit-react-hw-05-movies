{"version":3,"file":"static/js/961.ff1fafa8.chunk.js","mappings":"6KAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCAENC,EAAY,mCAAG,oGACAF,EAAAA,EAAAA,IAAA,qCACaC,EADb,oBADA,cACbE,EADa,yBAIZA,GAJY,2CAAH,qDAOZC,EAAc,mCAAG,WAAMC,GAAN,uFACFL,EAAAA,EAAAA,IAAA,+BACOC,EADP,iCACsCI,EADtC,oDADE,cACfF,EADe,yBAIdA,GAJc,2CAAH,sDAOdG,EAAgB,mCAAG,WAAMC,GAAN,uFACJP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,oBAAkCN,EAAlC,oBADI,cACjBE,EADiB,yBAEhBA,GAFgB,2CAAH,sDAKhBK,EAAa,mCAAG,WAAMD,GAAN,uFACDP,EAAAA,EAAAA,IAAA,iBACPO,EADO,4BACeN,EADf,2BADC,cACdE,EADc,yBAIbA,GAJa,2CAAH,sDAObM,EAAgB,mCAAG,WAAMF,GAAN,uFACJP,EAAAA,EAAAA,IAAA,iBACPO,EADO,4BACeN,EADf,2BADI,cACjBE,EADiB,yBAIhBA,GAJgB,2CAAH,sDAOhBO,EAAM,CACVR,aAAAA,EACAE,eAAAA,EACAE,iBAAAA,EACAE,cAAAA,EACAC,iBAAAA,GAGF,K,sJCpCe,SAASE,IAAgB,IAAD,IAC7BC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAY3D,OAVAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,oGACId,EAAAA,EAAAA,iBAAqBE,GADzB,OACXa,EADW,OAEjBT,EAASS,EAAOtB,MAFC,2CAAH,qDAIZS,GACFY,GAEH,GAAE,CAACZ,KAGF,4BACE,mBAAQc,KAAK,SAASC,UAAU,SAAhC,UACE,SAAC,KAAD,CAAMC,GAAIT,EAAoBU,QAA9B,wBAEF,4BACE,gBACEC,IACEf,EAAMgB,YAAN,yCACsChB,EAAMgB,YAD5C,6DAIFC,IAAKjB,EAAMkB,MACXC,MAAO,IACPC,OAAQ,OAEV,2BACG,KACD,0BACGpB,EAAMkB,MADT,KACkB,IAAIG,KAAKrB,EAAMsB,cAAcC,cAD/C,QAGA,yCAAsC,GAArBvB,EAAMwB,cAAmBC,QAAQ,GAAlD,QACA,sCACA,uBAAIzB,EAAM0B,YACV,oCACA,wBACG1B,EAAM2B,OACH3B,EAAM2B,OAAOC,KAAI,SAAAD,GACf,OACE,yBACE,uBAAIA,EAAOE,QADJF,EAAOnC,GAInB,IACD,YAIV,mDACA,4BACE,SAAC,KAAD,CAASqB,GAAE,OAAUP,MAAO,CAAEC,KAAML,GAApC,mBAGA,SAAC,KAAD,CAASW,GAAE,UAAaP,MAAO,CAAEC,KAAML,GAAvC,wBAIF,SAAC,KAAD,MAGL,C","sources":["api/moviesApi.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst APIKEY = `5f12ce2f6624da9aebe9b51df2b716a0`;\n\nconst getMoviesDay = async () => {\n  const data = await axios.get(\n    `trending/movie/day?api_key=${APIKEY}&language=en-US`\n  );\n  return data;\n};\n\nconst getMoviesQuery = async query => {\n  const data = await axios.get(\n    `search/movie?api_key=${APIKEY}&language=en-US&query=${query}&page=1&include_adult=false&include_adult=false`\n  );\n  return data;\n};\n\nconst getMoviesDetails = async id => {\n  const data = await axios.get(`/movie/${id}?api_key=${APIKEY}&language=en-US`);\n  return data;\n};\n\nconst getMoviesCast = async id => {\n  const data = await axios.get(\n    `/movie/${id}/credits?api_key=${APIKEY}&language=en-US&page=1`\n  );\n  return data;\n};\n\nconst getMoviesReviews = async id => {\n  const data = await axios.get(\n    `/movie/${id}/reviews?api_key=${APIKEY}&language=en-US&page=1`\n  );\n  return data;\n};\n\nconst api = {\n  getMoviesDay,\n  getMoviesQuery,\n  getMoviesDetails,\n  getMoviesCast,\n  getMoviesReviews,\n};\n\nexport default api;","import { useEffect, useState, useRef } from 'react';\nimport {\n  useLocation,\n  Link,\n  useParams,\n  Outlet,\n  NavLink,\n} from 'react-router-dom';\nimport api from '../../api/moviesApi';\n\nexport default function MovieDetails() {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState([]);\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      const result = await api.getMoviesDetails(movieId);\n      setMovie(result.data);\n    };\n    if (movieId) {\n      fetchMovie();\n    }\n  }, [movieId]);\n\n  return (\n    <div>\n      <button type=\"button\" className=\"button\">\n        <Link to={backLinkLocationRef.current}>Go Back</Link>\n      </button>\n      <div>\n        <img\n          src={\n            movie.poster_path\n              ? `https://image.tmdb.org/t/p/w500${movie.poster_path} `\n              : `https://static.thenounproject.com/png/1642843-200.png`\n          }\n          alt={movie.title}\n          width={400}\n          height={600}\n        />\n        <div>\n          {' '}\n          <h2>\n            {movie.title} ({new Date(movie.release_date).getFullYear()})\n          </h2>\n          <p>User Score: {(movie.vote_average * 10).toFixed(0)}%</p>\n          <h3>Overview</h3>\n          <p>{movie.overview}</p>\n          <h4>Genres</h4>\n          <ul>\n            {movie.genres\n              ? movie.genres.map(genres => {\n                  return (\n                    <li key={genres.id}>\n                      <p>{genres.name}</p>\n                    </li>\n                  );\n                })\n              : ''}\n          </ul>\n        </div>\n      </div>\n      <h2>Aditional information</h2>\n      <div>\n        <NavLink to={`cast`} state={{ from: location }}>\n          Cast\n        </NavLink>\n        <NavLink to={`reviews`} state={{ from: location }}>\n          Review\n        </NavLink>\n      </div>\n      <Outlet />\n    </div>\n  );\n}\n"],"names":["axios","APIKEY","getMoviesDay","data","getMoviesQuery","query","getMoviesDetails","id","getMoviesCast","getMoviesReviews","api","MovieDetails","movieId","useParams","useState","movie","setMovie","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","fetchMovie","result","type","className","to","current","src","poster_path","alt","title","width","height","Date","release_date","getFullYear","vote_average","toFixed","overview","genres","map","name"],"sourceRoot":""}